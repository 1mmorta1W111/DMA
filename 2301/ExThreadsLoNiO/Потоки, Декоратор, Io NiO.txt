
Вот несколько заданий для проверки знаний по темам Потоки ввода-вывода (I/O), паттерн Декоратор, и I/O vs NIO в Java.

Задание 1: Работа с потоками ввода-вывода
Задача: Напишите программу, которая читает текст из файла и записывает его в другой файл с изменениями:

Программа должна читать содержимое исходного файла построчно.
Преобразовать каждую строку текста в верхний регистр.
Записать преобразованный текст в новый файл.
Условия:

Для работы с файлами использовать классы из пакета java.io: BufferedReader, BufferedWriter, FileReader, FileWriter.
Программа должна быть устойчивой к ошибкам, например, если файл не найден.
Использовать обработку исключений через try-with-resources.







Задание 2: Реализация паттерна Декоратор
Задача: Реализуйте паттерн Декоратор для обработки текста. Напишите набор классов, которые будут декорировать строку:

Основной интерфейс TextProcessor, содержащий метод process(String text).
Реализуйте класс SimpleTextProcessor, который просто возвращает текст без изменений.
Реализуйте декораторы:
UpperCaseDecorator — преобразует текст в верхний регистр.
TrimDecorator — удаляет пробелы в начале и конце строки.
ReplaceDecorator — заменяет все пробелы символом подчеркивания (_).
Условия:

Продемонстрируйте работу декораторов, комбинируя их.
Пример использования: оберните текст в несколько декораторов и вызовите process.




Задание 3: Сравнение производительности IO и NIO
Задача: Напишите программу, которая читает большой текстовый файл (например, несколько мегабайт) двумя способами:

С использованием стандартных классов IO (FileReader и BufferedReader).
С использованием NIO (классы FileChannel, ByteBuffer, Files).
Условия:

Измерьте время выполнения каждой операции (чтение и запись файла).
Выведите результаты на консоль для сравнения производительности.
Критерии:

Программа должна читать файл целиком и записывать его в другой файл.
Время выполнения каждого метода должно быть замерено с помощью System.currentTimeMillis() или System.nanoTime().
Сделайте выводы на основе полученных данных: какой метод быстрее для больших файлов и почему.



Задание 4: Программа с использованием Java NIO
Задача: Напишите программу, которая копирует файл с использованием Java NIO.

Использовать FileChannel для чтения и записи данных.
Программа должна поддерживать возможность копирования больших файлов (> 1 Гб).
Реализовать обработку исключений, связанных с доступом к файлу или его отсутствием.
Условия:

Используйте методы transferTo() или transferFrom() из FileChannel для копирования содержимого.
Программа должна быть устойчива к прерыванию работы и сообщать об ошибках.
Критерии:

Корректная работа с большими файлами.
Использование механизмов NIO и сравнение производительности с классическим IO (опционально).




Вот несколько заданий для проверки знаний в области Потоков ввода-вывода, Паттерна Декоратор и работы с IO и NIO в Java. Каждое задание включает описание задачи и основные критерии для проверки.

Задание 1: Работа с потоками ввода-вывода
Задача: Напишите программу, которая читает текст из файла и записывает его в другой файл с изменениями:

Программа должна читать содержимое исходного файла построчно.
Преобразовать каждую строку текста в верхний регистр.
Записать преобразованный текст в новый файл.
Условия:

Для работы с файлами использовать классы из пакета java.io: BufferedReader, BufferedWriter, FileReader, FileWriter.
Программа должна быть устойчивой к ошибкам, например, если файл не найден.
Использовать обработку исключений через try-with-resources.
Пример: Исходный файл (input.txt):

Hello, World!
This is a test.
Результирующий файл (output.txt):

HELLO, WORLD!
THIS IS A TEST.
Подсказки:

Для чтения строк используйте BufferedReader.readLine().
Для записи строк используйте BufferedWriter.write().
Задание 2: Реализация паттерна Декоратор
Задача: Реализуйте паттерн Декоратор для обработки текста. Напишите набор классов, которые будут декорировать строку:

Основной интерфейс TextProcessor, содержащий метод process(String text).
Реализуйте класс SimpleTextProcessor, который просто возвращает текст без изменений.
Реализуйте декораторы:
UpperCaseDecorator — преобразует текст в верхний регистр.
TrimDecorator — удаляет пробелы в начале и конце строки.
ReplaceDecorator — заменяет все пробелы символом подчеркивания (_).
Условия:

Продемонстрируйте работу декораторов, комбинируя их.
Пример использования: оберните текст в несколько декораторов и вызовите process.
public class Main {
    public static void main(String[] args) {
        TextProcessor processor = new ReplaceDecorator(
            new UpperCaseDecorator(
                new TrimDecorator(new SimpleTextProcessor())
            )
        );
        String result = processor.process(" Hello world ");
        System.out.println(result); // Вывод: HELLO_WORLD
    }
}
Критерии:

Корректная реализация паттерна Декоратор с возможностью динамического добавления поведения объекту.
Возможность комбинировать декораторы.
Задание 3: Сравнение производительности IO и NIO
Задача: Напишите программу, которая читает большой текстовый файл (например, несколько мегабайт) двумя способами:

С использованием стандартных классов IO (FileReader и BufferedReader).
С использованием NIO (классы FileChannel, ByteBuffer, Files).
Условия:

Измерьте время выполнения каждой операции (чтение и запись файла).
Выведите результаты на консоль для сравнения производительности.
Критерии:

Программа должна читать файл целиком и записывать его в другой файл.
Время выполнения каждого метода должно быть замерено с помощью System.currentTimeMillis() или System.nanoTime().
Сделайте выводы на основе полученных данных: какой метод быстрее для больших файлов и почему.
Пример кода для замера времени:

long startTime = System.currentTimeMillis();
// Чтение или запись файла
long endTime = System.currentTimeMillis();
System.out.println("Время выполнения: " + (endTime - startTime) + " ms");
Задание 4: Программа с использованием Java NIO
Задача: Напишите программу, которая копирует файл с использованием Java NIO.

Использовать FileChannel для чтения и записи данных.
Программа должна поддерживать возможность копирования больших файлов (> 1 Гб).
Реализовать обработку исключений, связанных с доступом к файлу или его отсутствием.
Условия:

Используйте методы transferTo() или transferFrom() из FileChannel для копирования содержимого.
Программа должна быть устойчива к прерыванию работы и сообщать об ошибках.
Критерии:

Корректная работа с большими файлами.
Использование механизмов NIO и сравнение производительности с классическим IO (опционально).
Пример:

public static void copyFile(String source, String dest) throws IOException {
    try (FileChannel srcChannel = new FileInputStream(source).getChannel();
         FileChannel destChannel = new FileOutputStream(dest).getChannel()) {
        srcChannel.transferTo(0, srcChannel.size(), destChannel);
    }
}
Задание 5: Асинхронное чтение файла с использованием NIO.2
Задача: Напишите программу, которая выполняет асинхронное чтение файла с использованием NIO.2.

Используйте классы AsynchronousFileChannel и CompletionHandler.
Программа должна читать файл и выводить его содержимое на консоль по мере чтения.
Условия:

Файл должен считываться асинхронно в отдельном потоке.
Реализуйте CompletionHandler для обработки завершения чтения файла и ошибок.
Критерии:

Правильная работа с асинхронным API.
Асинхронная обработка завершения операции чтения.







